diff --git a/libobs/obs.c b/libobs/obs.c
index f37d8546..06a7828b 100644
--- a/libobs/obs.c
+++ b/libobs/obs.c
@@ -375,21 +375,24 @@ static int obs_init_video(struct obs_video_info *ovi)
 		return OBS_VIDEO_FAIL;
 	}
 
-	gs_enter_context(video->graphics);
+    if (!video->bypass_graphics) {
+        gs_enter_context(video->graphics);
 
-	if (ovi->gpu_conversion && !obs_init_gpu_conversion(ovi))
-		return OBS_VIDEO_FAIL;
-	if (!obs_init_textures(ovi))
-		return OBS_VIDEO_FAIL;
+        if (ovi->gpu_conversion && !obs_init_gpu_conversion(ovi))
+            return OBS_VIDEO_FAIL;
+        if (!obs_init_textures(ovi))
+            return OBS_VIDEO_FAIL;
 
-	gs_leave_context();
+        gs_leave_context();
 
-	errorcode = pthread_create(&video->video_thread, NULL,
-			obs_graphics_thread, obs);
-	if (errorcode != 0)
-		return OBS_VIDEO_FAIL;
+        errorcode = pthread_create(&video->video_thread, NULL,
+            obs_graphics_thread, obs);
+        if (errorcode != 0)
+            return OBS_VIDEO_FAIL;
+
+        video->thread_initialized = true;
+    }
 
-	video->thread_initialized = true;
 	video->ovi = *ovi;
 	return OBS_VIDEO_SUCCESS;
 }
@@ -947,7 +950,7 @@ int obs_reset_video(struct obs_video_info *ovi)
 	ovi->output_width  &= 0xFFFFFFFC;
 	ovi->output_height &= 0xFFFFFFFE;
 
-	if (!video->graphics) {
+	if (!video->bypass_graphics && !video->graphics) {
 		int errorcode = obs_init_graphics(ovi);
 		if (errorcode != OBS_VIDEO_SUCCESS) {
 			obs_free_graphics();
@@ -1263,7 +1266,7 @@ void obs_enum_sources(bool (*enum_proc)(void*, obs_source_t*), void *param)
 			(obs_source_t*)source->context.next;
 
 		if ((source->info.type == OBS_SOURCE_TYPE_INPUT) != 0 &&
-		    !source->context.private &&
+		    !source->context.private_ &&
 		    !enum_proc(param, source))
 			break;
 
@@ -1327,7 +1330,7 @@ static inline void *get_context_by_name(void *vfirst, const char *name,
 
 	context = *first;
 	while (context) {
-		if (!context->private && strcmp(context->name, name) == 0) {
+		if (!context->private_ && strcmp(context->name, name) == 0) {
 			context = addref(context);
 			break;
 		}
@@ -1735,7 +1738,7 @@ obs_data_array_t *obs_save_sources_filtered(obs_save_source_filter_cb cb,
 
 	while (source) {
 		if ((source->info.type != OBS_SOURCE_TYPE_FILTER) != 0 &&
-				!source->context.private && cb(data_, source)) {
+				!source->context.private_ && cb(data_, source)) {
 			obs_data_t *source_data = obs_save_source(source);
 
 			obs_data_array_push_back(array, source_data);
@@ -1763,9 +1766,9 @@ obs_data_array_t *obs_save_sources(void)
 }
 
 /* ensures that names are never blank */
-static inline char *dup_name(const char *name, bool private)
+static inline char *dup_name(const char *name, bool _private)
 {
-	if (private && !name)
+	if (_private && !name)
 		return NULL;
 
 	if (!name || !*name) {
@@ -1785,11 +1788,11 @@ static inline bool obs_context_data_init_wrap(
 		obs_data_t              *settings,
 		const char              *name,
 		obs_data_t              *hotkey_data,
-		bool                    private)
+		bool                    _private)
 {
 	assert(context);
 	memset(context, 0, sizeof(*context));
-	context->private = private;
+	context->private_ = _private;
 	context->type = type;
 
 	pthread_mutex_init_value(&context->rename_cache_mutex);
@@ -1804,7 +1807,7 @@ static inline bool obs_context_data_init_wrap(
 	if (!context->procs)
 		return false;
 
-	context->name        = dup_name(name, private);
+	context->name        = dup_name(name, _private);
 	context->settings    = obs_data_newref(settings);
 	context->hotkey_data = obs_data_newref(hotkey_data);
 	return true;
@@ -1816,10 +1819,10 @@ bool obs_context_data_init(
 		obs_data_t              *settings,
 		const char              *name,
 		obs_data_t              *hotkey_data,
-		bool                    private)
+		bool                    _private)
 {
 	if (obs_context_data_init_wrap(context, type, settings, name,
-				hotkey_data, private)) {
+				hotkey_data, _private)) {
 		return true;
 	} else {
 		obs_context_data_free(context);
@@ -1885,7 +1888,7 @@ void obs_context_data_setname(struct obs_context_data *context,
 
 	if (context->name)
 		da_push_back(context->rename_cache, &context->name);
-	context->name = dup_name(name, context->private);
+	context->name = dup_name(name, context->private_);
 
 	pthread_mutex_unlock(&context->rename_cache_mutex);
 }
